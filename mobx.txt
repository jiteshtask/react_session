autorunAsync(() => {
    // Assuming that profile.asJson returns an observable Json representation of profile,
    // send it to the server each time it is changed, but await at least 300 milliseconds before sending it.
    // When sent, the latest value of profile.asJson will be used.
    sendProfileToServer(profile.asJson);
}, 300);




// correct use of reaction: reacts to length and title changes
const reaction2 = reaction(
    () => todos.map(todo => todo.title),
    titles => console.log("reaction 2:", titles.join(", "))
)


//*******************Store*****************************//

import { observable, computed, action, extendObservable } from 'mobx';
export class Box {
    @observable sealed = true;
    @observable closed = true;
    @observable kakis = [];
    
    @computed get canSeal() {
        return this.closed;
    }
    @computed get canOpen() {
        return !this.sealed;
    }
    @computed get canManipulatekakis() {
        return !this.closed;
    }
    @action addkaki() {
        this.kakis.push(new kaki());
    }
    @action takekaki() {
        this.kakis.pop();
    }
    @action open() {
        if (this.canOpen) {
            this.opened = true;
        }
    }
    @action close() {
        this.closed = true;
    }
    @action seal() {
        if (this.canSeal) {
            this.sealed = true;
        }
    }
    @action unseal() {
        this.sealed = false;
    }
}